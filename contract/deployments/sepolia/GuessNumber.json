{
  "address": "0xeCcb4e82DcFb3327471d5FD62439AB638800Bbcd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vefCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "GuessNumber__OutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuessNumber__PaymentNotEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuessNumber__RandomNumberCreating",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GuessNumber__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerNumber",
          "type": "uint256"
        }
      ],
      "name": "NotWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "playerNumber",
          "type": "uint256"
        }
      ],
      "name": "Winner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_playerNumber",
          "type": "uint256"
        }
      ],
      "name": "drawLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getAmountByAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinPayment",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xcedbf522a88f94784109f86e59ce616cb884d2f6787ec7a2231c6a11a1e69b09",
  "receipt": {
    "to": null,
    "from": "0x1657D97e81c59C3ac5a6d2B4617E2a1c386cf0A1",
    "contractAddress": "0xeCcb4e82DcFb3327471d5FD62439AB638800Bbcd",
    "transactionIndex": 68,
    "gasUsed": "876377",
    "logsBloom": "0x
    "blockHash": "0xea4d53bdb95a910db54afcb506d70cb7bf57ca3292009c2781aad0213a625fad",
    "transactionHash": "0xcedbf522a88f94784109f86e59ce616cb884d2f6787ec7a2231c6a11a1e69b09",
    "logs": [],
    "blockNumber": 3689296,
    "cumulativeGasUsed": "8998158",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8103B0A8A00be2DDC778e6e7eaa21791Cd364625",
    "0x474e34a077df58807dbe9c96d3c009b23b3c6d0cce433e59bbf5b34f823bc56c",
    "2692",
    "500000"
  ],
  "numDeployments": 3,
  "solcInputHash": "27642e382e32aa33d7df7f87bcd3780f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vefCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"GuessNumber__OutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuessNumber__PaymentNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuessNumber__RandomNumberCreating\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuessNumber__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerNumber\",\"type\":\"uint256\"}],\"name\":\"NotWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"playerNumber\",\"type\":\"uint256\"}],\"name\":\"Winner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_playerNumber\",\"type\":\"uint256\"}],\"name\":\"drawLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAmountByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinPayment\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GuessNumber.sol\":\"GuessNumber\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/GuessNumber.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\r\\n\\r\\nerror GuessNumber__NotOwner();\\r\\nerror GuessNumber__PaymentNotEnough(); // Insufficient\\r\\nerror GuessNumber__RandomNumberCreating();\\r\\nerror GuessNumber__OutOfRange();\\r\\nerror GuessNumber__TransferFailed();\\r\\n\\r\\ncontract GuessNumber is VRFConsumerBaseV2 {\\r\\n    event NotWinner(address indexed player, uint256 playerNumber);\\r\\n    event Winner(address indexed player, uint256 playerNumber);\\r\\n\\r\\n    address private immutable i_owner;\\r\\n    /**\\r\\n     \\u4ed8\\u6b3e\\u76f8\\u95dc\\u8b8a\\u6578\\r\\n    */\\r\\n    mapping(address => uint) paymentAddress;\\r\\n    uint256 private minPayment = 0.01 ether;\\r\\n\\r\\n    /**\\r\\n     vrf \\u76f8\\u95dc\\u8b8a\\u6578\\r\\n    */\\r\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\r\\n    bytes32 private immutable i_gasLane;\\r\\n    uint64 private immutable i_subId;\\r\\n    uint16 private constant requestConfirmations = 3;\\r\\n    uint32 private immutable i_callbackGasLimit;\\r\\n    uint32 private constant numWords = 1;\\r\\n    uint256 public requestId;\\r\\n\\r\\n    /**\\r\\n     \\u96a8\\u6a5f\\u6578\\u5b57 \\u76f8\\u95dc\\u8b8a\\u6578\\r\\n    */\\r\\n    uint256 private randomWord = 7; // \\u96a8\\u6a5f\\u6578\\u5b57\\r\\n    bool private creatingRandomNumber = false;\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        if (msg.sender != i_owner) revert GuessNumber__NotOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    constructor(\\r\\n        address vefCoordinatorV2,\\r\\n        bytes32 gasLane,\\r\\n        uint64 subId,\\r\\n        uint32 callbackGasLimit\\r\\n    ) payable VRFConsumerBaseV2(vefCoordinatorV2) {\\r\\n        i_owner = msg.sender;\\r\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vefCoordinatorV2);\\r\\n        i_gasLane = gasLane;\\r\\n        i_subId = subId;\\r\\n        i_callbackGasLimit = callbackGasLimit;\\r\\n    }\\r\\n\\r\\n    // \\u7522\\u751f\\u96a8\\u6a5f\\u6578\\u5b57\\r\\n    function requestRandomWords() private {\\r\\n        creatingRandomNumber = true;\\r\\n        requestId = i_vrfCoordinator.requestRandomWords(\\r\\n            i_gasLane,\\r\\n            i_subId,\\r\\n            requestConfirmations,\\r\\n            i_callbackGasLimit,\\r\\n            numWords\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function fulfillRandomWords(\\r\\n        uint256 /* requestId*/,\\r\\n        uint256[] memory s_randomWords\\r\\n    ) internal override {\\r\\n        randomWord = limitToRange(s_randomWords[0]);\\r\\n        creatingRandomNumber = false;\\r\\n    }\\r\\n\\r\\n    // \\u7522\\u751f 1~10 \\u7684\\u6578\\u5b57\\r\\n    function limitToRange(uint256 _randomNumber) private pure returns (uint8) {\\r\\n        uint8 minValue = 1;\\r\\n        uint8 maxValue = 10;\\r\\n        uint8 range = maxValue - minValue + 1;\\r\\n        return uint8(_randomNumber % range) + minValue;\\r\\n    }\\r\\n\\r\\n    // \\u62bd\\u734e\\r\\n    function drawLottery(uint256 _playerNumber) public payable {\\r\\n        if (msg.value < minPayment) revert GuessNumber__PaymentNotEnough();\\r\\n        if (creatingRandomNumber) revert GuessNumber__RandomNumberCreating();\\r\\n        if (_playerNumber > 10 || _playerNumber < 1)\\r\\n            revert GuessNumber__OutOfRange();\\r\\n\\r\\n        paymentAddress[msg.sender] += msg.value;\\r\\n\\r\\n        if (randomWord != _playerNumber) {\\r\\n            emit NotWinner(msg.sender, _playerNumber);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 prizeAmount = (address(this).balance * 80) / 100; // 80% \\u7684\\u9322\\u9322\\r\\n        (bool success, ) = (msg.sender).call{value: prizeAmount}(\\\"\\\");\\r\\n        if (!success) {\\r\\n            revert GuessNumber__TransferFailed();\\r\\n        }\\r\\n        requestRandomWords();\\r\\n        emit Winner(msg.sender, _playerNumber);\\r\\n    }\\r\\n\\r\\n    // \\u53d6\\u5f97\\u5408\\u7d04\\u4f48\\u7f72\\u8005\\r\\n    function getContractOwner() external view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getContractBalance() external view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n\\r\\n    function getMinPayment() external view returns (uint256) {\\r\\n        return minPayment;\\r\\n    }\\r\\n\\r\\n    function getAmountByAddress(\\r\\n        address _address\\r\\n    ) external view returns (uint256) {\\r\\n        return paymentAddress[_address];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1831a5048267ae95e82afec5a7c9806b0c749b92f916d477d596b48a2e8c3417\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x610140604052662386f26fc1000060015560076003556000600460006101000a81548160ff0219169083151502179055506040516200111138038062001111833981810160405281019062000055919062000262565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050503373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508260e081815250508167ffffffffffffffff166101008167ffffffffffffffff16815250508063ffffffff166101208163ffffffff168152505050505050620002d4565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000169826200013c565b9050919050565b6200017b816200015c565b81146200018757600080fd5b50565b6000815190506200019b8162000170565b92915050565b6000819050919050565b620001b681620001a1565b8114620001c257600080fd5b50565b600081519050620001d681620001ab565b92915050565b600067ffffffffffffffff82169050919050565b620001fb81620001dc565b81146200020757600080fd5b50565b6000815190506200021b81620001f0565b92915050565b600063ffffffff82169050919050565b6200023c8162000221565b81146200024857600080fd5b50565b6000815190506200025c8162000231565b92915050565b600080600080608085870312156200027f576200027e62000137565b5b60006200028f878288016200018a565b9450506020620002a287828801620001c5565b9350506040620002b5878288016200020a565b9250506060620002c8878288016200024b565b91505092959194509250565b60805160a05160c05160e0516101005161012051610de66200032b60003960006106740152600061065101526000610630015260006105f4015260006102770152600081816101b501526102090152610de66000f3fe6080604052600436106100735760003560e01c80636f9fb98a1161004e5780636f9fb98a146100fe57806377a890cd14610129578063c8249f9214610154578063e303a92b146101915761007a565b80626d6cae1461007f5780631fe543e3146100aa578063442890d5146100d35761007a565b3661007a57005b600080fd5b34801561008b57600080fd5b506100946101ad565b6040516100a19190610766565b60405180910390f35b3480156100b657600080fd5b506100d160048036038101906100cc919061091a565b6101b3565b005b3480156100df57600080fd5b506100e8610273565b6040516100f591906109b7565b60405180910390f35b34801561010a57600080fd5b5061011361029b565b6040516101209190610766565b60405180910390f35b34801561013557600080fd5b5061013e6102a3565b60405161014b9190610766565b60405180910390f35b34801561016057600080fd5b5061017b600480360381019061017691906109fe565b6102ad565b6040516101889190610766565b60405180910390f35b6101ab60048036038101906101a69190610a2b565b6102f5565b005b60025481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161025c929190610a58565b60405180910390fd5b61026f828261058b565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600047905090565b6000600154905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600154341015610331576040517fba67e20c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900460ff1615610378576040517f15cc912f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a8111806103875750600181105b156103be576040517fd106663b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461040c9190610ab0565b92505081905550806003541461046f573373ffffffffffffffffffffffffffffffffffffffff167fa671d18f80943522791813b968ea6c8e13e6020778c0fb09f32efb7dddedd502826040516104629190610766565b60405180910390a2610588565b600060646050476104809190610ae4565b61048a9190610b55565b905060003373ffffffffffffffffffffffffffffffffffffffff16826040516104b290610bb7565b60006040518083038185875af1925050503d80600081146104ef576040519150601f19603f3d011682016040523d82523d6000602084013e6104f4565b606091505b505090508061052f576040517f9bedd0ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105376105d7565b3373ffffffffffffffffffffffffffffffffffffffff167f9c2270628a9b29d30ae96b6c4c14ed646ee134febdce38a5b77f2bde9cea2e208460405161057d9190610766565b60405180910390a250505b50565b6105af816000815181106105a2576105a1610bcc565b5b6020026020010151610700565b60ff166003819055506000600460006101000a81548160ff0219169083151502179055505050565b6001600460006101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106b5959493929190610c73565b6020604051808303816000875af11580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f89190610cdb565b600281905550565b600080600190506000600a905060006001838361071d9190610d15565b6107279190610d4a565b9050828160ff16866107399190610d7f565b6107439190610d4a565b9350505050919050565b6000819050919050565b6107608161074d565b82525050565b600060208201905061077b6000830184610757565b92915050565b6000604051905090565b600080fd5b600080fd5b61079e8161074d565b81146107a957600080fd5b50565b6000813590506107bb81610795565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61080f826107c6565b810181811067ffffffffffffffff8211171561082e5761082d6107d7565b5b80604052505050565b6000610841610781565b905061084d8282610806565b919050565b600067ffffffffffffffff82111561086d5761086c6107d7565b5b602082029050602081019050919050565b600080fd5b600061089661089184610852565b610837565b905080838252602082019050602084028301858111156108b9576108b861087e565b5b835b818110156108e257806108ce88826107ac565b8452602084019350506020810190506108bb565b5050509392505050565b600082601f830112610901576109006107c1565b5b8135610911848260208601610883565b91505092915050565b600080604083850312156109315761093061078b565b5b600061093f858286016107ac565b925050602083013567ffffffffffffffff8111156109605761095f610790565b5b61096c858286016108ec565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109a182610976565b9050919050565b6109b181610996565b82525050565b60006020820190506109cc60008301846109a8565b92915050565b6109db81610996565b81146109e657600080fd5b50565b6000813590506109f8816109d2565b92915050565b600060208284031215610a1457610a1361078b565b5b6000610a22848285016109e9565b91505092915050565b600060208284031215610a4157610a4061078b565b5b6000610a4f848285016107ac565b91505092915050565b6000604082019050610a6d60008301856109a8565b610a7a60208301846109a8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610abb8261074d565b9150610ac68361074d565b9250828201905080821115610ade57610add610a81565b5b92915050565b6000610aef8261074d565b9150610afa8361074d565b9250828202610b088161074d565b91508282048414831517610b1f57610b1e610a81565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b608261074d565b9150610b6b8361074d565b925082610b7b57610b7a610b26565b5b828204905092915050565b600081905092915050565b50565b6000610ba1600083610b86565b9150610bac82610b91565b600082019050919050565b6000610bc282610b94565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b610c0e81610bfb565b82525050565b600067ffffffffffffffff82169050919050565b610c3181610c14565b82525050565b600061ffff82169050919050565b610c4e81610c37565b82525050565b600063ffffffff82169050919050565b610c6d81610c54565b82525050565b600060a082019050610c886000830188610c05565b610c956020830187610c28565b610ca26040830186610c45565b610caf6060830185610c64565b610cbc6080830184610c64565b9695505050505050565b600081519050610cd581610795565b92915050565b600060208284031215610cf157610cf061078b565b5b6000610cff84828501610cc6565b91505092915050565b600060ff82169050919050565b6000610d2082610d08565b9150610d2b83610d08565b9250828203905060ff811115610d4457610d43610a81565b5b92915050565b6000610d5582610d08565b9150610d6083610d08565b9250828201905060ff811115610d7957610d78610a81565b5b92915050565b6000610d8a8261074d565b9150610d958361074d565b925082610da557610da4610b26565b5b82820690509291505056fea264697066735822122081d8b19ccab8e1b43f438b195686103a62531e4c41c0fe72f2cf418ec280101764736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100735760003560e01c80636f9fb98a1161004e5780636f9fb98a146100fe57806377a890cd14610129578063c8249f9214610154578063e303a92b146101915761007a565b80626d6cae1461007f5780631fe543e3146100aa578063442890d5146100d35761007a565b3661007a57005b600080fd5b34801561008b57600080fd5b506100946101ad565b6040516100a19190610766565b60405180910390f35b3480156100b657600080fd5b506100d160048036038101906100cc919061091a565b6101b3565b005b3480156100df57600080fd5b506100e8610273565b6040516100f591906109b7565b60405180910390f35b34801561010a57600080fd5b5061011361029b565b6040516101209190610766565b60405180910390f35b34801561013557600080fd5b5061013e6102a3565b60405161014b9190610766565b60405180910390f35b34801561016057600080fd5b5061017b600480360381019061017691906109fe565b6102ad565b6040516101889190610766565b60405180910390f35b6101ab60048036038101906101a69190610a2b565b6102f5565b005b60025481565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461026557337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161025c929190610a58565b60405180910390fd5b61026f828261058b565b5050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600047905090565b6000600154905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600154341015610331576040517fba67e20c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600460009054906101000a900460ff1615610378576040517f15cc912f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600a8111806103875750600181105b156103be576040517fd106663b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461040c9190610ab0565b92505081905550806003541461046f573373ffffffffffffffffffffffffffffffffffffffff167fa671d18f80943522791813b968ea6c8e13e6020778c0fb09f32efb7dddedd502826040516104629190610766565b60405180910390a2610588565b600060646050476104809190610ae4565b61048a9190610b55565b905060003373ffffffffffffffffffffffffffffffffffffffff16826040516104b290610bb7565b60006040518083038185875af1925050503d80600081146104ef576040519150601f19603f3d011682016040523d82523d6000602084013e6104f4565b606091505b505090508061052f576040517f9bedd0ea00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105376105d7565b3373ffffffffffffffffffffffffffffffffffffffff167f9c2270628a9b29d30ae96b6c4c14ed646ee134febdce38a5b77f2bde9cea2e208460405161057d9190610766565b60405180910390a250505b50565b6105af816000815181106105a2576105a1610bcc565b5b6020026020010151610700565b60ff166003819055506000600460006101000a81548160ff0219169083151502179055505050565b6001600460006101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106b5959493929190610c73565b6020604051808303816000875af11580156106d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f89190610cdb565b600281905550565b600080600190506000600a905060006001838361071d9190610d15565b6107279190610d4a565b9050828160ff16866107399190610d7f565b6107439190610d4a565b9350505050919050565b6000819050919050565b6107608161074d565b82525050565b600060208201905061077b6000830184610757565b92915050565b6000604051905090565b600080fd5b600080fd5b61079e8161074d565b81146107a957600080fd5b50565b6000813590506107bb81610795565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61080f826107c6565b810181811067ffffffffffffffff8211171561082e5761082d6107d7565b5b80604052505050565b6000610841610781565b905061084d8282610806565b919050565b600067ffffffffffffffff82111561086d5761086c6107d7565b5b602082029050602081019050919050565b600080fd5b600061089661089184610852565b610837565b905080838252602082019050602084028301858111156108b9576108b861087e565b5b835b818110156108e257806108ce88826107ac565b8452602084019350506020810190506108bb565b5050509392505050565b600082601f830112610901576109006107c1565b5b8135610911848260208601610883565b91505092915050565b600080604083850312156109315761093061078b565b5b600061093f858286016107ac565b925050602083013567ffffffffffffffff8111156109605761095f610790565b5b61096c858286016108ec565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109a182610976565b9050919050565b6109b181610996565b82525050565b60006020820190506109cc60008301846109a8565b92915050565b6109db81610996565b81146109e657600080fd5b50565b6000813590506109f8816109d2565b92915050565b600060208284031215610a1457610a1361078b565b5b6000610a22848285016109e9565b91505092915050565b600060208284031215610a4157610a4061078b565b5b6000610a4f848285016107ac565b91505092915050565b6000604082019050610a6d60008301856109a8565b610a7a60208301846109a8565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610abb8261074d565b9150610ac68361074d565b9250828201905080821115610ade57610add610a81565b5b92915050565b6000610aef8261074d565b9150610afa8361074d565b9250828202610b088161074d565b91508282048414831517610b1f57610b1e610a81565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b608261074d565b9150610b6b8361074d565b925082610b7b57610b7a610b26565b5b828204905092915050565b600081905092915050565b50565b6000610ba1600083610b86565b9150610bac82610b91565b600082019050919050565b6000610bc282610b94565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b610c0e81610bfb565b82525050565b600067ffffffffffffffff82169050919050565b610c3181610c14565b82525050565b600061ffff82169050919050565b610c4e81610c37565b82525050565b600063ffffffff82169050919050565b610c6d81610c54565b82525050565b600060a082019050610c886000830188610c05565b610c956020830187610c28565b610ca26040830186610c45565b610caf6060830185610c64565b610cbc6080830184610c64565b9695505050505050565b600081519050610cd581610795565b92915050565b600060208284031215610cf157610cf061078b565b5b6000610cff84828501610cc6565b91505092915050565b600060ff82169050919050565b6000610d2082610d08565b9150610d2b83610d08565b9250828203905060ff811115610d4457610d43610a81565b5b92915050565b6000610d5582610d08565b9150610d6083610d08565b9250828201905060ff811115610d7957610d78610a81565b5b92915050565b6000610d8a8261074d565b9150610d958361074d565b925082610da557610da4610b26565b5b82820690509291505056fea264697066735822122081d8b19ccab8e1b43f438b195686103a62531e4c41c0fe72f2cf418ec280101764736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1146,
        "contract": "contracts/GuessNumber.sol:GuessNumber",
        "label": "paymentAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1149,
        "contract": "contracts/GuessNumber.sol:GuessNumber",
        "label": "minPayment",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1167,
        "contract": "contracts/GuessNumber.sol:GuessNumber",
        "label": "requestId",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1171,
        "contract": "contracts/GuessNumber.sol:GuessNumber",
        "label": "randomWord",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1174,
        "contract": "contracts/GuessNumber.sol:GuessNumber",
        "label": "creatingRandomNumber",
        "offset": 0,
        "slot": "4",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}